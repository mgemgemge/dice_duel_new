from telegram import Update, User
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import random
import json
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8289019477:AAEcpZIpOsTzpN1h9phzKEv3GVJcbxMM3f4"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!
BALANCE_FILE = "balances.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
def load_balances():
    if os.path.exists(BALANCE_FILE):
        with open(BALANCE_FILE, "r") as f:
            return json.load(f)
    return {}

def save_balances(balances):
    with open(BALANCE_FILE, "w") as f:
        json.dump(balances, f)

# –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞
def get_user_id(user_input: str, update: Update) -> str:
    if user_input.startswith("@"):
        # –ü–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º —Ä–∞–∑—Ä–µ—à–∏—Ç—å username ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –æ—Ç–≤–µ—Ç–∞
        # –í MVP –±—É–¥–µ–º –ø—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return None
    return user_input

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    balances = load_balances()
    user_id = str(user.id)
    if user_id not in balances:
        balances[user_id] = 500
        save_balances(balances)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balances[user_id]} –º–æ–Ω–µ—Ç.\n\n"
        "–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –∏ –Ω–∞–ø–∏—à–∏:\n/duel 100"
    )

# –ö–æ–º–∞–Ω–¥–∞ /balance
async def balance_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    balances = load_balances()
    bal = balances.get(str(user.id), 500)
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal} –º–æ–Ω–µ—Ç")

# –ö–æ–º–∞–Ω–¥–∞ /duel ‚Äî –≤—ã–∑–æ–≤
async def duel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ –Ω–∞–ø–∏—à–∏: /duel [—Å—Ç–∞–≤–∫–∞]")
        return

    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Å—Ç–∞–≤–∫—É: /duel 100")
        return

    try:
        bet = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    if bet < 10:
        await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç")
        return

    challenger = update.effective_user
    opponent = update.message.reply_to_message.from_user

    if challenger.id == opponent.id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π!")
        return

    balances = load_balances()
    ch_id = str(challenger.id)
    op_id = str(opponent.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    if ch_id not in balances:
        balances[ch_id] = 500
    if op_id not in balances:
        balances[op_id] = 500

    if balances[ch_id] < bet:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return

    save_balances(balances)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—É—ç–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî –¥–ª—è MVP)
    context.bot_data[f"duel_{op_id}"] = {
        "challenger_id": ch_id,
        "opponent_id": op_id,
        "bet": bet,
        "challenger_name": challenger.first_name,
        "opponent_name": opponent.first_name,
    }

    await update.message.reply_text(
        f"{challenger.first_name} –≤—ã–∑—ã–≤–∞–µ—Ç {opponent.first_name} –Ω–∞ –¥—É—ç–ª—å!\n"
        f"–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç üé≤\n\n"
        f"{opponent.first_name}, –Ω–∞–ø–∏—à–∏ ¬´–ü—Ä–∏–Ω–∏–º–∞—é¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü—Ä–∏–Ω–∏–º–∞—é"
async def handle_accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)

    duel_key = f"duel_{user_id}"
    if duel_key not in context.bot_data:
        return  # –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥—É—ç–ª–∏

    duel_data = context.bot_data[duel_key]
    if duel_data["opponent_id"] != user_id:
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å
    ch_name = duel_data["challenger_name"]
    op_name = duel_data["opponent_name"]
    bet = duel_data["bet"]

    await update.message.reply_text(f"üé≤ –î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å! –°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç")

    ch_score = 0
    op_score = 0

    for round_num in range(1, 4):
        await update.message.reply_text(f"–†–∞—É–Ω–¥ {round_num}...")
        await update.message.reply_text("üé≤ üé≤", disable_notification=True)
        await update.message.reply_text("...", disable_notification=True)

        ch_roll = random.randint(1, 6)
        op_roll = random.randint(1, 6)

        if ch_roll > op_roll:
            ch_score += 1
        elif op_roll > ch_roll:
            op_score += 1

        await update.message.reply_text(f"{ch_name}: {ch_roll} ‚Äî {op_name}: {op_roll}")

    # –ò—Ç–æ–≥
    balances = load_balances()
    ch_id = duel_data["challenger_id"]
    op_id = duel_data["opponent_id"]

    if ch_score > op_score:
        winner, winner_id = ch_name, ch_id
        balances[ch_id] += bet
        balances[op_id] -= bet
    elif op_score > ch_score:
        winner, winner_id = op_name, op_id
        balances[op_id] += bet
        balances[ch_id] -= bet
    else:
        winner = "–ù–∏—á—å—è!"
        # –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º

    save_balances(balances)

    if ch_score != op_score:
        await update.message.reply_text(f"üèÜ –ü–æ–±–µ–¥–∏–ª(–∞) {winner}! –í—ã–∏–≥—Ä—ã—à: {bet} –º–æ–Ω–µ—Ç")
    else:
        await update.message.reply_text("ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

    # –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å
    del context.bot_data[duel_key]

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance_cmd))
    application.add_handler(CommandHandler("duel", duel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_accept))

    application.run_polling()
